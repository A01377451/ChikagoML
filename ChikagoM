package jlo;

import robocode.AdvancedRobot;

import java.awt.Color;
import robocode.AdvancedRobot;
import robocode.HitByBulletEvent;
import robocode.HitRobotEvent;
import robocode.HitWallEvent;
import robocode.ScannedRobotEvent;
import robocode.TurnCompleteCondition;

public class ChikagoM extends AdvancedRobot {

	private Estado estado;
	private ScannedRobotEvent eventoUltimo;
	private boolean yoveoveo;
	private double moveAmount;
	private boolean caminar;
	private double previousEnergy = 100;
	private int movementDirection = 1;
	private int gunDirection = 1;
	private int x = 1;

	@Override
	public void run() {
		inicializar();

		while (true) {

			switch (estado) {
			case MUCHOS:
				if (getOthers() < 5) // cuando queden 5 o menos robotos
					estado = Estado.MASO;
				else
					freeforall(); // se va a las orillas para evitar morir

				break;

			case MASO:
				if (getOthers() < 3) // cuando queden 3 o menos robotos
					estado = Estado.MUERTESUBITA;
				else
					crazy(); // patron random para despistar
				break;

			case MUERTESUBITA:
				setColors(Color.RED, Color.RED, Color.RED);

				turnGunRight(120);

				// proxEstrella(); // ya tiene mas punteria
				break;
			}
		}
	}

	private void proxEstrella() { // se va a cambiar el patrón después
		ahead(150);
		turnGunRight(250);
		back(300);
		turnGunRight(250);
	}

	private void crazy() { // este solo gira aleatoreamente
		// Ya quedan menos
		setAhead(40000);
		caminar = true;
		setTurnRight(90);
		waitFor(new TurnCompleteCondition(this));
		setTurnLeft(180);
		waitFor(new TurnCompleteCondition(this));
		setTurnRight(180);
		waitFor(new TurnCompleteCondition(this));
	}

	private void freeforall() { // orillas
		// Irnos a las orillas
		yoveoveo = true;
		ahead(moveAmount);
		yoveoveo = false;
		turnRight(90);
		
		turnGunRight(60);
		for (int i = 0; i < 5; i++) {
			turnGunLeft(20);
			fire(1);			
		}
		turnGunLeft(60);
	}

	@Override
	public void onHitWall(HitWallEvent event) {
		if (estado == Estado.MASO) { // evitar que choque cuando gira a lo loco
			if (caminar) {
				setBack(40000);
				caminar = false;
			} else {
				setAhead(40000);
				caminar = true;
			}
		}
	}

	@Override
	public void onScannedRobot(ScannedRobotEvent event) {
		if (estado == Estado.MUCHOS) { // dispara al encontrar a alguien cerca
			if (event.getDistance() < 450 && event.getDistance()>100) {
				fire(1);
			}
			else if (event.getDistance()<=100) {
				fire(2);
			}
			if (yoveoveo) { // pa' checar por enemigos
				scan();

			}
		}

		if (estado == Estado.MASO) {
			if (event.getDistance() < 450) { // dispara si estan cerca gg
				fire(1);
			}
		}

		if (estado == Estado.MUERTESUBITA) {
			setTurnRight(event.getBearing() + 90 - 30 * movementDirection);
			double changeInEnergy = previousEnergy - event.getEnergy();
			if (changeInEnergy > 0 && changeInEnergy <= 3) {
				movementDirection = -movementDirection;
				setAhead((event.getDistance() / 4 + 25) * movementDirection);
			}
			gunDirection = -gunDirection;
			setTurnGunRight(99999 * gunDirection);

			if(event.getDistance()<300) {
				fire(2);
			}

			previousEnergy = event.getEnergy();
		}
	}

	@Override
	public void onHitRobot(HitRobotEvent event) {
		if (estado == Estado.MUCHOS) { // pa' tras o delante depende de donde peguen
			if (event.getBearing() > -90 && event.getBearing() < 90) {
				back(100);
			} else {
				ahead(100);
			}

		} else if (estado == Estado.MASO) {
			if (caminar) {
				setBack(40000);
				caminar = false;
			} else {
				setAhead(40000);
				caminar = true;
			}
		}
	}

	@Override
	public void onHitByBullet(HitByBulletEvent event) {
		if(estado == Estado.MUCHOS) {
			ahead(20);
		}
		//if (estado == Estado.MUERTESUBITA) { // venganza
		//	turnLeft(90 - event.getBearing());
		//	x = 2;
		//}

	}

	private void inicializar() {
		setColors(Color.CYAN, Color.BLACK, Color.CYAN); // pimp our robot
		setRadarColor(Color.WHITE);

		estado = Estado.MUCHOS; // para que se mueva al inicio

		moveAmount = Math.max(getBattleFieldWidth(), getBattleFieldHeight()); // sbaer la pantalla
		yoveoveo = false;

		turnLeft(getHeading() % 90);
		ahead(moveAmount);

		yoveoveo = true;
		turnGunRight(90);
		turnRight(90);

	}

	private enum Estado { // nuestros estados
		MUCHOS, MASO, MUERTESUBITA
	}

}
